"""
Statistics endpoints for API v1.

These routes expose aggregated metrics about the system.  Only users
with administrative privileges (role_id == 1) may access these
endpoints.  Clients can query high‑level counts and revenue via the
overview endpoint or per‑event statistics with sorting and
pagination.  All responses are generated by the ``StatisticsService``.
"""

from typing import Dict, Any, List

from fastapi import APIRouter, Depends, HTTPException, Query, status

from event_planner_api.app.core.security import get_current_user, require_roles
from event_planner_api.app.services.statistics_service import StatisticsService

router = APIRouter()


def _require_admin(current_user: dict) -> None:
    """Raise a 403 error if the current user is not an administrator or super‑administrator."""
    if current_user.get("role_id") not in (1, 2):
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Insufficient permissions")


@router.get("/overview", response_model=Dict[str, Any])
async def statistics_overview(current_user: dict = Depends(require_roles(1, 2))) -> Dict[str, Any]:
    """Return global counts and revenue statistics (admin only)."""
    # current_user is validated by require_roles; call service
    return await StatisticsService.overview()


@router.get("/events", response_model=List[Dict[str, Any]])
async def events_statistics(
    sort_by: str = Query("id"),
    order: str = Query("asc"),
    limit: int = Query(50, ge=1, le=1000),
    offset: int = Query(0, ge=0),
    current_user: dict = Depends(require_roles(1, 2)),
) -> List[Dict[str, Any]]:
    """Return statistics for each event with sorting and pagination (admin only)."""
    # current_user is validated by require_roles; call service
    return await StatisticsService.events_statistics(sort_by=sort_by, order=order, limit=limit, offset=offset)


@router.get("/payments", response_model=List[Dict[str, Any]])
async def payments_statistics(
    start_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Include payments created on or after this date.",
    ),
    end_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Include payments created before this date.",
    ),
    group_by: str = Query(
        "day",
        description="Aggregation unit: day, month, event, provider, status",
        regex="^(day|month|event|provider|status)$",
    ),
    current_user: dict = Depends(require_roles(1, 2)),
) -> List[Dict[str, Any]]:
    """Return aggregated payment statistics (admin only).

    Filters payments by optional date range and groups the results by the
    specified unit.  Only authenticated administrators may access
    this endpoint.
    """
    return await StatisticsService.payments_statistics(start_date=start_date, end_date=end_date, group_by=group_by)


@router.get("/bookings", response_model=List[Dict[str, Any]])
async def bookings_statistics(
    start_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Include bookings created on or after this date.",
    ),
    end_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Include bookings created before this date.",
    ),
    group_by: str = Query(
        "day",
        description="Aggregation unit: day, month, event, status",
        regex="^(day|month|event|status)$",
    ),
    current_user: dict = Depends(require_roles(1, 2)),
) -> List[Dict[str, Any]]:
    """Return aggregated booking statistics (admin only).

    Filters bookings by optional date range and groups the results by the
    specified unit.  Only authenticated administrators may access
    this endpoint.
    """
    return await StatisticsService.bookings_statistics(start_date=start_date, end_date=end_date, group_by=group_by)


# Users statistics endpoint
@router.get("/users", response_model=List[Dict[str, Any]])
async def users_statistics(
    start_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Consider activity on or after this date when computing active and paying users.",
    ),
    end_date: str | None = Query(
        None,
        description="ISO date (YYYY-MM-DD). Consider activity before this date when computing active and paying users.",
    ),
    group_by: str = Query(
        "social_provider",
        description="Aggregation unit: social_provider, role or none (overall metrics)",
        regex="^(social_provider|role|none)$",
    ),
    current_user: dict = Depends(require_roles(1, 2)),
) -> List[Dict[str, Any]]:
    """Return aggregated user statistics (admin only).

    This endpoint provides insight into the user base by aggregating
    users according to social provider (e.g. Telegram, VK), role
    (super_admin, admin, user), or by returning overall counts of
    active and paying users.  Optional date filters limit the
    activity considered when counting active or paying users.  Only
    authenticated administrators may access this endpoint.
    """
    return await StatisticsService.users_statistics(start_date=start_date, end_date=end_date, group_by=group_by)