{
  "openapi": "3.1.0",
  "info": {
    "title": "Event Planner API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/events/": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Create Event",
        "description": "Create a new event.\n\nRequires an administrator (role_id 1 or 2).  Validates the\nauthenticated user's role via the ``require_roles`` dependency.\nFuture iterations should perform additional validation on the\nevent payload.",
        "operationId": "create_event_api_v1_events__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "events"
        ],
        "summary": "List Events",
        "description": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u043e\u0439.\n\n- **limit**, **offset** \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438.\n- **sort_by** \u2014 \u043f\u043e\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: `id`, `title`, `start_time`, `duration_minutes`, `max_participants`.\n- **order** \u2014 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 (`asc`/`desc`).\n- **is_paid** \u2014 \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u043f\u043b\u0430\u0442\u043d\u043e\u0441\u0442\u0438 (true/false) \u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e.\n- **date_from**, **date_to** \u2014 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043f\u043e \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 (ISO\u2011\u0441\u0442\u0440\u043e\u043a\u0438).",
        "operationId": "list_events_api_v1_events__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id",
              "title": "Sort By"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "title": "Order"
            }
          },
          {
            "name": "is_paid",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Paid"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date From"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Date To"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventRead"
                  },
                  "title": "Response List Events Api V1 Events  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{event_id}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get Event",
        "description": "Retrieve a single event by its ID.\n\nIn the future, add authentication and permission checks (e.g.,\nprivate events visible only to certain users).  Raises 404 if\nthe event is not found.",
        "operationId": "get_event_api_v1_events__event_id__get",
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "summary": "Update Event",
        "description": "Update an existing event.\n\nOnly administrators (role_id 1 or 2) may modify events.  Partial\nupdates are supported; any unspecified fields remain unchanged.",
        "operationId": "update_event_api_v1_events__event_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Delete Event",
        "description": "Delete an event (admin only).\n\nWhen deleting an event, related records (bookings, payments, reviews) are\nremoved as part of the ``EventService.delete_event`` implementation.\nFuture versions should consider soft deletion or additional checks\nbefore removing events with dependencies.",
        "operationId": "delete_event_api_v1_events__event_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{event_id}/duplicate": {
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Duplicate Event",
        "description": "Duplicate an event with a new start time.\n\nRequires administrator privileges (role_id 1 or 2).  The request\nbody must contain the ``start_time`` for the new event.",
        "operationId": "duplicate_event_api_v1_events__event_id__duplicate_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDuplicate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{event_id}/participants": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "List Event Participants",
        "description": "List all bookings (participants) for an event.\n\nOnly administrators (role_id 1 or 2) can view the full participant list.\nFuture versions may allow event organizers or the event creator to\naccess this information.",
        "operationId": "list_event_participants_api_v1_events__event_id__participants_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRead"
                  },
                  "title": "Response List Event Participants Api V1 Events  Event Id  Participants Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List Users",
        "description": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.\n\n\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c.  \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c\n\u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f (\u043f\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438, \u0441\u0442\u0430\u0442\u0443\u0441\u0443 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0442.\u043f.).",
        "operationId": "list_users_api_v1_users__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRead"
                  },
                  "type": "array",
                  "title": "Response List Users Api V1 Users  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Register User",
        "description": "\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\n\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c.  \u0412\n\u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0437\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 e\u2011mail,\n\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f (bcrypt/argon2), \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u043e\u0447\u0442\u044b \u0438\n\u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0440\u043e\u043b\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.  \u0421\u0435\u0439\u0447\u0430\u0441 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.",
        "operationId": "register_user_api_v1_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Login User",
        "description": "\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u043e\u043a\u0435\u043d.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f e\u2011mail \u0438 \u043f\u0430\u0440\u043e\u043b\u044c.  \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f\n\u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443 ``UserLogin`` \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c refresh\u2011\u0442\u043e\u043a\u0435\u043d\u044b\n\u0434\u043b\u044f \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438.  \u041c\u0435\u0442\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439\n\u043f\u0430\u0440\u043e\u043b\u044c \u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0447\u0451\u0442\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445\n\u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a.",
        "operationId": "login_user_api_v1_users_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Login User Api V1 Users Login Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/social-login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Social Login",
        "description": "Authenticate or register a user via social provider and return a token.\n\nThis endpoint allows bots or messenger integrations to obtain a JWT\nwithout requiring an email/password.  If a user with the given\n``social_provider`` and ``social_id`` exists, a new access token is issued.\nOtherwise a new user is created with role ``user`` (role_id=3) and a\ntoken is returned.  The optional ``full_name`` is used only when creating\na new user.",
        "operationId": "social_login_api_v1_users_social_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Social Login Api V1 Users Social Login Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User",
        "description": "Update a user's profile, status or password.\n\nOnly administrators may update other users.  The body may\ncontain ``full_name``, ``disabled``, ``password``, or ``role_id``.\n``role_id`` changes the user's role via RoleService.",
        "operationId": "update_user_api_v1_users__user_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User Endpoint",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e ID.\n\n\u0422\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043b\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n\u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f.  \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e\n\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430) \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.  \u041f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 (\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0442\u0438\u043a\u0435\u0442\u044b, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043b\u0430\u0442\u0435\u0436\u0438) \u0431\u0443\u0434\u0443\u0442\n\u0443\u0434\u0430\u043b\u0435\u043d\u044b \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e.",
        "operationId": "delete_user_endpoint_api_v1_users__user_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Create Payment",
        "description": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u043b\u0430\u0442\u0451\u0436.\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f.  \u0412 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430\n\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u044b, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0448\u043b\u044e\u0437\u0430\u043c\u0438\n(\u042eKassa, Stripe \u0438 \u0442.\u0434.), \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438\n\u0441\u0432\u044f\u0437\u043a\u0430 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435\u043c \u0438\u043b\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u0430.",
        "operationId": "create_payment_api_v1_payments__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "List Payments",
        "description": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439.\n\n\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0432\u0438\u0434\u0438\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438, \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u2014 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0438.\n\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u044b ``event_id``, ``provider`` (yookassa/support/cash), ``status``\n(pending/success), \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e ``created_at`` \u0438\u043b\u0438 ``amount`` \u0438\n\u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f.",
        "operationId": "list_payments_api_v1_payments__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Event Id"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider"
            }
          },
          {
            "name": "status_param",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Param"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRead"
                  },
                  "title": "Response List Payments Api V1 Payments  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/{payment_id}/confirm": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Confirm Payment",
        "description": "\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u043f\u043b\u0430\u0442\u0451\u0436 (\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043b\u0438 \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440).\n\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 ``success`` \u0438 \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e\u0449\u0435\u0433\u043e.  \u0414\u043b\u044f\n\u043f\u043b\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0431\u0440\u043e\u043d\u0438 \u043a\u0430\u043a \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435.",
        "operationId": "confirm_payment_api_v1_payments__payment_id__confirm_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID \u043f\u043b\u0430\u0442\u0435\u0436\u0430",
              "title": "Payment Id"
            },
            "description": "ID \u043f\u043b\u0430\u0442\u0435\u0436\u0430"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/{payment_id}": {
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Delete Payment",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043b\u0430\u0442\u0451\u0436.\n\n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c.  \u041f\u0440\u0438\n\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043f\u0440\u0435\u0442\u0438\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0451\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439;\n\u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043b\u044e\u0431\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c.  \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 204 \u043f\u0440\u0438\n\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438.",
        "operationId": "delete_payment_api_v1_payments__payment_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID \u043f\u043b\u0430\u0442\u0435\u0436\u0430",
              "title": "Payment Id"
            },
            "description": "ID \u043f\u043b\u0430\u0442\u0435\u0436\u0430"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payments/yookassa/callback": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Yookassa Callback",
        "description": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c callback \u043e\u0442 \u042eKassa.\n\n\u0412 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435 \u042eKassa \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0435\n\u043f\u043b\u0430\u0442\u0435\u0436\u0430.  \u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: \u043f\u043e\u043b\u0435\n``object.id`` \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c ``external_id`` \u043f\u043b\u0430\u0442\u0435\u0436\u0430.  \u041d\u0430\n\u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u043e\u0433\u043e id \u0432 \u0431\u0430\u0437\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0442\u0443\u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u0430.  \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\n\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 HTTP\u2011\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\n\u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435.",
        "operationId": "yookassa_callback_api_v1_payments_yookassa_callback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Callback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{event_id}/bookings": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Create Booking",
        "description": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0440\u043e\u043d\u044c \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435.\n\n\u0415\u0441\u043b\u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043c\u0435\u0441\u0442 \u043d\u0435\u0442, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043c\u0435\u0449\u0451\u043d \u0432 \u043b\u0438\u0441\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f,\n\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f HTTP\u00a0400 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c.  \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435\n\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u0431\u0440\u043e\u043d\u044c \u0441\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c ``pending``.",
        "operationId": "create_booking_api_v1_events__event_id__bookings_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the event to book",
              "title": "Event Id"
            },
            "description": "ID of the event to book"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "List Event Bookings",
        "description": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f.\n\n\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e ``created_at``, ``user_id``, ``is_paid`` \u0438\u043b\u0438\n``is_attended``, \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e.\n\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c.",
        "operationId": "list_event_bookings_api_v1_events__event_id__bookings_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the event",
              "title": "Event Id"
            },
            "description": "ID of the event"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingRead"
                  },
                  "title": "Response List Event Bookings Api V1 Events  Event Id  Bookings Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/events/{event_id}/waitlist": {
      "get": {
        "tags": [
          "bookings"
        ],
        "summary": "List Event Waitlist",
        "description": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043b\u0438\u0441\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f.\n\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 ``id``, ``user_id``, ``position`` \u0438 ``created_at``.",
        "operationId": "list_event_waitlist_api_v1_events__event_id__waitlist_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the event",
              "title": "Event Id"
            },
            "description": "ID of the event"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bookings/{booking_id}": {
      "delete": {
        "tags": [
          "bookings"
        ],
        "summary": "Delete Booking Endpoint",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.\n\n\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c.  \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0431\u0440\u043e\u043d\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\n\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0432\u0448\u0435\u0435\u0441\u044f \u043c\u0435\u0441\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438\n\u0438\u0437 \u043b\u0438\u0441\u0442\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f.  \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 ``204 No Content`` \u0432 \u0441\u043b\u0443\u0447\u0430\u0435\n\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f.  \u0415\u0441\u043b\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f\n\u043e\u0448\u0438\u0431\u043a\u0430 404.",
        "operationId": "delete_booking_endpoint_api_v1_bookings__booking_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "booking_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the booking",
              "title": "Booking Id"
            },
            "description": "ID of the booking"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bookings/{booking_id}/toggle-payment": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Toggle Booking Payment",
        "description": "Toggle the payment status of a booking.\n\nOnly \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u043b\u0430\u0442\u044b.  The response\nreturns no content on success.",
        "operationId": "toggle_booking_payment_api_v1_bookings__booking_id__toggle_payment_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "booking_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the booking",
              "title": "Booking Id"
            },
            "description": "ID of the booking"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bookings/{booking_id}/toggle-attendance": {
      "post": {
        "tags": [
          "bookings"
        ],
        "summary": "Toggle Booking Attendance",
        "description": "Toggle the attendance status of a booking.\n\nOnly \u0441\u0443\u043f\u0435\u0440\u2011\u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f.  Returns no content.",
        "operationId": "toggle_booking_attendance_api_v1_bookings__booking_id__toggle_attendance_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "booking_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the booking",
              "title": "Booking Id"
            },
            "description": "ID of the booking"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/settings/": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "List Settings",
        "description": "List all settings.\n\nOnly super administrators may read settings.  Future versions may\nscope settings by namespace and restrict access further.",
        "operationId": "list_settings_api_v1_settings__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Settings Api V1 Settings  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/settings/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Setting",
        "description": "Retrieve a single setting by key.\n\nOnly super administrators may access individual settings.",
        "operationId": "get_setting_api_v1_settings__key__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Setting Api V1 Settings  Key  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Upsert Setting",
        "description": "Insert or update a setting.\n\nOnly super administrators may change settings.  The request body must\ninclude ``value`` and ``type`` keys.  Supported types are\n``string``, ``int``, ``float`` and ``bool``.",
        "operationId": "upsert_setting_api_v1_settings__key__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Upsert Setting Api V1 Settings  Key  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/messages/": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "List Messages",
        "description": "List all bot message templates.",
        "operationId": "list_messages_api_v1_messages__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Messages Api V1 Messages  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/messages/{key}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get Message",
        "description": "Retrieve a single bot message template by key.",
        "operationId": "get_message_api_v1_messages__key__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Message Api V1 Messages  Key  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Upsert Message",
        "description": "Insert or update a bot message template.\n\nThe request body must contain ``content`` and may contain\n``buttons`` (a list of objects).  The ``buttons`` structure\nshould follow the format expected by the client (e.g. callback\ndata for Telegram).",
        "operationId": "upsert_message_api_v1_messages__key__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Upsert Message Api V1 Messages  Key  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Delete Message",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n\n\u0422\u043e\u043b\u044c\u043a\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.  \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 204\n\u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438.  \u0415\u0441\u043b\u0438 \u043a\u043b\u044e\u0447 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 404.",
        "operationId": "delete_message_api_v1_messages__key__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "List Roles",
        "description": "List all roles.\n\nOnly super administrators (role_id 1) may list roles.",
        "operationId": "list_roles_api_v1_roles__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Roles Api V1 Roles  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Create Role",
        "description": "Create a new role.\n\nOnly super administrators may create new roles.  The request body must\ncontain a ``name`` key and may include ``permissions`` (list of strings).",
        "operationId": "create_role_api_v1_roles__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Create Role Api V1 Roles  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/roles/{role_id}": {
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Update Role",
        "description": "Update an existing role.\n\nOnly super administrators may modify roles.  The body may specify\n``name`` and/or ``permissions``.",
        "operationId": "update_role_api_v1_roles__role_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Role Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Update Role Api V1 Roles  Role Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete Role",
        "description": "Delete a role.\n\nOnly super administrators may delete roles.",
        "operationId": "delete_role_api_v1_roles__role_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Role Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/assign": {
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Assign Role",
        "description": "Assign a role to a user.\n\nOnly super administrators may assign roles to users.  The request body must\ninclude ``user_id`` and ``role_id``.",
        "operationId": "assign_role_api_v1_roles_assign_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/support/tickets": {
      "post": {
        "tags": [
          "support"
        ],
        "summary": "Open a new support ticket",
        "description": "Create a new support ticket.\n\nAccepts the subject and initial message content.  The user must\nbe authenticated.  Returns the created ticket.",
        "operationId": "create_ticket_api_v1_support_tickets_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "support"
        ],
        "summary": "List support tickets",
        "description": "Return a list of support tickets visible to the current user.\n\nAdmin users can view all tickets; regular users see only their own.\nSupports optional filtering by status and pagination via ``limit``\nand ``offset`` query parameters.",
        "operationId": "list_tickets_api_v1_support_tickets_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort by 'created_at', 'updated_at' or 'status'",
              "title": "Sort By"
            },
            "description": "Sort by 'created_at', 'updated_at' or 'status'"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order 'asc' or 'desc'",
              "title": "Order"
            },
            "description": "Sort order 'asc' or 'desc'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportTicketRead"
                  },
                  "title": "Response List Tickets Api V1 Support Tickets Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/support/tickets/{ticket_id}": {
      "get": {
        "tags": [
          "support"
        ],
        "summary": "Get ticket details and messages",
        "description": "Retrieve a ticket and all of its messages.\n\nUsers can access only their own tickets; admins can access any.\nReturns both the ticket details and the message thread.",
        "operationId": "get_ticket_api_v1_support_tickets__ticket_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ticket_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ticket Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketWithMessages"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "support"
        ],
        "summary": "Delete a support ticket",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0438\u043a\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438.\n\n\u0422\u043e\u043b\u044c\u043a\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0442\u0438\u043a\u0435\u0442\u044b.  \u0423\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435\n\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.  \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 204, \u0435\u0441\u043b\u0438 \u0432\u0441\u0451 \u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e.",
        "operationId": "delete_ticket_api_v1_support_tickets__ticket_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ticket_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ticket Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/support/tickets/{ticket_id}/reply": {
      "post": {
        "tags": [
          "support"
        ],
        "summary": "Reply to a ticket",
        "description": "Add a reply to an existing support ticket.\n\nThe current user must be the ticket owner or an admin.\nReturns the created message.",
        "operationId": "reply_to_ticket_api_v1_support_tickets__ticket_id__reply_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ticket_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ticket Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportMessageCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportMessageRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/support/tickets/{ticket_id}/status": {
      "put": {
        "tags": [
          "support"
        ],
        "summary": "Change ticket status",
        "description": "Update the status of a support ticket.\n\nOnly administrators may update the status.  Valid statuses should\nbe validated by the caller (e.g. 'open', 'in_progress', 'resolved',\n'closed').",
        "operationId": "update_ticket_status_api_v1_support_tickets__ticket_id__status_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ticket_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ticket Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews": {
      "post": {
        "tags": [
          "reviews"
        ],
        "summary": "Submit a review",
        "description": "Create a new review for an event.\n\nThe current user must have attended the event.  Returns the\ncreated review with ``approved`` set to ``False``.",
        "operationId": "create_review_api_v1_reviews_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "List reviews",
        "description": "List reviews with optional filters.\n\nRegular users see only their own reviews; administrators can\nfilter by event, user or approval status.  Results are\npaginated.",
        "operationId": "list_reviews_api_v1_reviews_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Event Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "approved",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Approved"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort by 'created_at' or 'rating'",
              "title": "Sort By"
            },
            "description": "Sort by 'created_at' or 'rating'"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order 'asc' or 'desc'",
              "title": "Order"
            },
            "description": "Sort order 'asc' or 'desc'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewRead"
                  },
                  "title": "Response List Reviews Api V1 Reviews Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}": {
      "get": {
        "tags": [
          "reviews"
        ],
        "summary": "Get a single review",
        "description": "Retrieve a single review by its ID.\n\nNon-admin users can only access their own reviews.",
        "operationId": "get_review_api_v1_reviews__review_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "reviews"
        ],
        "summary": "Delete a review",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0442\u0437\u044b\u0432.\n\n\u0422\u043e\u043b\u044c\u043a\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u043e\u0442\u0437\u044b\u0432, \u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0439\n\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0439 \u043e\u0442\u0437\u044b\u0432.  \u041f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438\n\u0437\u0430\u043f\u0438\u0441\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 404.",
        "operationId": "delete_review_api_v1_reviews__review_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{review_id}/moderate": {
      "put": {
        "tags": [
          "reviews"
        ],
        "summary": "Moderate a review",
        "description": "Approve or reject a review.\n\nOnly administrators (super\u2011administrators and administrators) can call this endpoint.",
        "operationId": "moderate_review_api_v1_reviews__review_id__moderate_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Review Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewModerate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mailings/": {
      "post": {
        "tags": [
          "mailings"
        ],
        "summary": "Create a mailing",
        "description": "Create a new mailing.\n\nOnly super administrators may create mailings.  The ``filters`` field\naccepts a JSON object specifying criteria (e.g., event_id,\nis_paid, is_attended) to select recipients.  If\n``scheduled_at`` is provided, the mailing may be scheduled for\nlater execution by an external scheduler; immediate sending can\nbe triggered via the send endpoint.",
        "operationId": "create_mailing_api_v1_mailings__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailingCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailingRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "mailings"
        ],
        "summary": "List mailings",
        "description": "List mailings.\n\nOnly super administrators may view the list.  Results are paginated.",
        "operationId": "list_mailings_api_v1_mailings__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort by 'created_at' or 'scheduled_at'",
              "title": "Sort By"
            },
            "description": "Sort by 'created_at' or 'scheduled_at'"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order 'asc' or 'desc'",
              "title": "Order"
            },
            "description": "Sort order 'asc' or 'desc'"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailingRead"
                  },
                  "title": "Response List Mailings Api V1 Mailings  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mailings/{mailing_id}": {
      "delete": {
        "tags": [
          "mailings"
        ],
        "summary": "Delete a mailing",
        "description": "\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0443.\n\nOnly super administrators may delete mailings along with their logs.  Returns\n204 on success; raises 404 if the mailing does not exist.",
        "operationId": "delete_mailing_api_v1_mailings__mailing_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mailing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mailing Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "mailings"
        ],
        "summary": "Get mailing details",
        "description": "Retrieve a mailing by ID.\n\nOnly super administrators may view mailing details.  Raises 404 if the\nmailing does not exist.",
        "operationId": "get_mailing_api_v1_mailings__mailing_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mailing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mailing Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailingRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "mailings"
        ],
        "summary": "Update a mailing",
        "description": "Update an existing mailing.\n\nOnly super administrators may update mailings.  Any fields omitted from the\nrequest body will be left unchanged.  If the ``messengers`` list is\nprovided, the existing messenger list will be replaced and associated\ntasks will be recreated with the new schedule and channels.",
        "operationId": "update_mailing_api_v1_mailings__mailing_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mailing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mailing Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailingRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mailings/{mailing_id}/send": {
      "post": {
        "tags": [
          "mailings"
        ],
        "summary": "Execute a mailing",
        "description": "Send the mailing to all recipients matching its filters.\n\nOnly super administrators may trigger sending.  Returns the number of\nrecipients to whom the message was sent.",
        "operationId": "send_mailing_api_v1_mailings__mailing_id__send_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mailing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mailing Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Send Mailing Api V1 Mailings  Mailing Id  Send Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mailings/{mailing_id}/logs": {
      "get": {
        "tags": [
          "mailings"
        ],
        "summary": "Get mailing logs",
        "description": "Retrieve delivery logs for a mailing.\n\nOnly super administrators may view logs.  Results are paginated.",
        "operationId": "get_logs_api_v1_mailings__mailing_id__logs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "mailing_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mailing Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailingLogRead"
                  },
                  "title": "Response Get Logs Api V1 Mailings  Mailing Id  Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/faqs/": {
      "get": {
        "tags": [
          "faqs"
        ],
        "summary": "List Faqs",
        "description": "Return a paginated list of FAQs.\n\nOrdered by ``position`` ascending then ``id`` ascending.  This\nendpoint is publicly accessible and does not require\nauthentication.  Clients may call it without an Authorization\nheader to retrieve the current FAQ entries.  Administrators\nshould use the CRUD endpoints to manage FAQ content.",
        "operationId": "list_faqs_api_v1_faqs__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FAQRead"
                  },
                  "title": "Response List Faqs Api V1 Faqs  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "faqs"
        ],
        "summary": "Create Faq",
        "description": "Create a new FAQ entry (admin only).",
        "operationId": "create_faq_api_v1_faqs__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FAQCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/faqs/{faq_id}": {
      "get": {
        "tags": [
          "faqs"
        ],
        "summary": "Get Faq",
        "description": "Retrieve a single FAQ by ID.\n\nReturns HTTP 404 if the entry is not found.  This endpoint is\npublicly accessible and does not require authentication.",
        "operationId": "get_faq_api_v1_faqs__faq_id__get",
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "faqs"
        ],
        "summary": "Update Faq",
        "description": "Update an existing FAQ entry (admin only).",
        "operationId": "update_faq_api_v1_faqs__faq_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FAQUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "faqs"
        ],
        "summary": "Delete Faq",
        "description": "Delete an FAQ entry (admin only).",
        "operationId": "delete_faq_api_v1_faqs__faq_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/faq/": {
      "get": {
        "tags": [
          "faqs"
        ],
        "summary": "List Faqs",
        "description": "Return a paginated list of FAQs.\n\nOrdered by ``position`` ascending then ``id`` ascending.  This\nendpoint is publicly accessible and does not require\nauthentication.  Clients may call it without an Authorization\nheader to retrieve the current FAQ entries.  Administrators\nshould use the CRUD endpoints to manage FAQ content.",
        "operationId": "list_faqs_api_v1_faq__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FAQRead"
                  },
                  "title": "Response List Faqs Api V1 Faq  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "faqs"
        ],
        "summary": "Create Faq",
        "description": "Create a new FAQ entry (admin only).",
        "operationId": "create_faq_api_v1_faq__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FAQCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/faq/{faq_id}": {
      "get": {
        "tags": [
          "faqs"
        ],
        "summary": "Get Faq",
        "description": "Retrieve a single FAQ by ID.\n\nReturns HTTP 404 if the entry is not found.  This endpoint is\npublicly accessible and does not require authentication.",
        "operationId": "get_faq_api_v1_faq__faq_id__get",
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "faqs"
        ],
        "summary": "Update Faq",
        "description": "Update an existing FAQ entry (admin only).",
        "operationId": "update_faq_api_v1_faq__faq_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FAQUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FAQRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "faqs"
        ],
        "summary": "Delete Faq",
        "description": "Delete an FAQ entry (admin only).",
        "operationId": "delete_faq_api_v1_faq__faq_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "faq_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Faq Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/info/": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get Info",
        "description": "Return the information message and a list of FAQs.\n\nThe info message is looked up by the key ``info`` in the\n``bot_messages`` table.  The returned object contains the\n``content`` and optional ``buttons`` of the info message, along\nwith a list of FAQ short questions and their IDs.  If no info\nmessage is configured, a 404 error is returned.",
        "operationId": "get_info_api_v1_info__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Info Api V1 Info  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/statistics/overview": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Statistics Overview",
        "description": "Return global counts and revenue statistics (admin only).",
        "operationId": "statistics_overview_api_v1_statistics_overview_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Statistics Overview Api V1 Statistics Overview Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/statistics/events": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Events Statistics",
        "description": "Return statistics for each event with sorting and pagination (admin only).",
        "operationId": "events_statistics_api_v1_statistics_events_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "id",
              "title": "Sort By"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc",
              "title": "Order"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Events Statistics Api V1 Statistics Events Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/statistics/payments": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Payments Statistics",
        "description": "Return aggregated payment statistics (admin only).\n\nFilters payments by optional date range and groups the results by the\nspecified unit.  Only authenticated administrators may access\nthis endpoint.",
        "operationId": "payments_statistics_api_v1_statistics_payments_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Include payments created on or after this date.",
              "title": "Start Date"
            },
            "description": "ISO date (YYYY-MM-DD). Include payments created on or after this date."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Include payments created before this date.",
              "title": "End Date"
            },
            "description": "ISO date (YYYY-MM-DD). Include payments created before this date."
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(day|month|event|provider|status)$",
              "description": "Aggregation unit: day, month, event, provider, status",
              "default": "day",
              "title": "Group By"
            },
            "description": "Aggregation unit: day, month, event, provider, status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Payments Statistics Api V1 Statistics Payments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/statistics/bookings": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Bookings Statistics",
        "description": "Return aggregated booking statistics (admin only).\n\nFilters bookings by optional date range and groups the results by the\nspecified unit.  Only authenticated administrators may access\nthis endpoint.",
        "operationId": "bookings_statistics_api_v1_statistics_bookings_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Include bookings created on or after this date.",
              "title": "Start Date"
            },
            "description": "ISO date (YYYY-MM-DD). Include bookings created on or after this date."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Include bookings created before this date.",
              "title": "End Date"
            },
            "description": "ISO date (YYYY-MM-DD). Include bookings created before this date."
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(day|month|event|status)$",
              "description": "Aggregation unit: day, month, event, status",
              "default": "day",
              "title": "Group By"
            },
            "description": "Aggregation unit: day, month, event, status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Bookings Statistics Api V1 Statistics Bookings Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/statistics/users": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Users Statistics",
        "description": "Return aggregated user statistics (admin only).\n\nThis endpoint provides insight into the user base by aggregating\nusers according to social provider (e.g. Telegram, VK), role\n(super_admin, admin, user), or by returning overall counts of\nactive and paying users.  Optional date filters limit the\nactivity considered when counting active or paying users.  Only\nauthenticated administrators may access this endpoint.",
        "operationId": "users_statistics_api_v1_statistics_users_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Consider activity on or after this date when computing active and paying users.",
              "title": "Start Date"
            },
            "description": "ISO date (YYYY-MM-DD). Consider activity on or after this date when computing active and paying users."
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "ISO date (YYYY-MM-DD). Consider activity before this date when computing active and paying users.",
              "title": "End Date"
            },
            "description": "ISO date (YYYY-MM-DD). Consider activity before this date when computing active and paying users."
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(social_provider|role|none)$",
              "description": "Aggregation unit: social_provider, role or none (overall metrics)",
              "default": "social_provider",
              "title": "Group By"
            },
            "description": "Aggregation unit: social_provider, role or none (overall metrics)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response Users Statistics Api V1 Statistics Users Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/audit/logs": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "List Audit Logs",
        "description": "Retrieve audit logs with optional filters.\n\nOnly users with role_id == 1 may access this endpoint.  Returns a\nlist of audit records ordered by timestamp descending.",
        "operationId": "list_audit_logs_api_v1_audit_logs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by acting user ID",
              "title": "User Id"
            },
            "description": "Filter by acting user ID"
          },
          {
            "name": "object_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by object type (event, booking, payment, etc.)",
              "title": "Object Type"
            },
            "description": "Filter by object type (event, booking, payment, etc.)"
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by action (create, update, delete)",
              "title": "Action"
            },
            "description": "Filter by action (create, update, delete)"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (ISO format) for filtering",
              "title": "Start Date"
            },
            "description": "Start date (ISO format) for filtering"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (ISO format) for filtering",
              "title": "End Date"
            },
            "description": "End date (ISO format) for filtering"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum number of logs to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of logs to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of logs to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of logs to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "title": "Response List Audit Logs Api V1 Audit Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks": {
      "get": {
        "tags": [
          "tasks",
          "tasks"
        ],
        "summary": "Get pending tasks for a messenger",
        "description": "Return pending tasks for a specific messenger.\n\nBots should poll this endpoint regularly (e.g. every minute) to discover\nnew work items.  Each task corresponds to a scheduled action (currently\nmailings) and is created separately for each messenger.  When a bot\ncompletes a task, it must call the completion endpoint with the task's\nID so that the task is not returned again.  Only administrators and\nbots with an administrator role can access tasks.\n\nParameters\n----------\nmessenger : str\n    Short code of the messenger requesting tasks (e.g. ``telegram``,\n    ``vk``, ``max``).  Tasks for other messengers are not returned.\nuntil : Optional[str]\n    ISO\u2011formatted timestamp limiting the maximum ``scheduled_at`` of\n    tasks returned.  Tasks scheduled after this time are excluded.\n    If omitted, the current server time is used.\n\nReturns\n-------\nList[TaskRead]\n    A list of pending tasks for the given messenger.",
        "operationId": "get_pending_tasks_api_v1_tasks_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "messenger",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(telegram|vk|max)$",
              "description": "Code of the messenger requesting tasks. Supported values: 'telegram', 'vk', 'max'. Only tasks for this messenger will be returned.",
              "title": "Messenger"
            },
            "description": "Code of the messenger requesting tasks. Supported values: 'telegram', 'vk', 'max'. Only tasks for this messenger will be returned."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional ISO date/time up to which tasks should be returned. Tasks scheduled after this time are excluded. If omitted, the current server time is used.",
              "title": "Until"
            },
            "description": "Optional ISO date/time up to which tasks should be returned. Tasks scheduled after this time are excluded. If omitted, the current server time is used."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRead"
                  },
                  "title": "Response Get Pending Tasks Api V1 Tasks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}/complete": {
      "post": {
        "tags": [
          "tasks",
          "tasks"
        ],
        "summary": "Mark a task as completed",
        "description": "Mark the specified task as completed.\n\nBots must call this endpoint after successfully processing a task returned\nby ``GET /tasks``.  Once a task is marked as completed it will no\nlonger be returned to any messenger, ensuring that each task is\nexecuted at most once per messenger.\n\nParameters\n----------\ntask_id : int\n    Identifier of the task to complete.  This ID is returned by the\n    ``GET /tasks`` endpoint.\n\nReturns\n-------\nNone\n    Responds with HTTP 204 No Content on success.",
        "operationId": "complete_task_api_v1_tasks__task_id__complete_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BookingCreate": {
        "properties": {
          "group_size": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Group Size",
            "default": 1,
            "example": 1
          },
          "group_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Group Names",
            "description": "Names of participants in the group"
          }
        },
        "type": "object",
        "title": "BookingCreate",
        "description": "Schema for creating a booking."
      },
      "BookingRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "group_size": {
            "type": "integer",
            "title": "Group Size"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "is_paid": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Paid",
            "default": false
          },
          "is_attended": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Attended",
            "default": false
          },
          "group_names": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Group Names"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "event_id",
          "group_size",
          "status",
          "created_at"
        ],
        "title": "BookingRead"
      },
      "EventCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "example": "Yoga Class"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "example": "A relaxing yoga session"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "example": "2025-09-01T10:00:00Z"
          },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes",
            "example": 60
          },
          "max_participants": {
            "type": "integer",
            "title": "Max Participants",
            "example": 15
          },
          "is_paid": {
            "type": "boolean",
            "title": "Is Paid",
            "default": false,
            "example": false
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_time",
          "duration_minutes",
          "max_participants"
        ],
        "title": "EventCreate",
        "description": "Schema for creating an event."
      },
      "EventDuplicate": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "example": "2025-09-15T10:00:00Z"
          }
        },
        "type": "object",
        "required": [
          "start_time"
        ],
        "title": "EventDuplicate",
        "description": "Schema for duplicating an event.\n\nRequires a new start time for the duplicated event.  Other fields\nwill be copied from the source event."
      },
      "EventRead": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "example": "Yoga Class"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "example": "A relaxing yoga session"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start Time",
            "example": "2025-09-01T10:00:00Z"
          },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes",
            "example": 60
          },
          "max_participants": {
            "type": "integer",
            "title": "Max Participants",
            "example": 15
          },
          "is_paid": {
            "type": "boolean",
            "title": "Is Paid",
            "default": false,
            "example": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_time",
          "duration_minutes",
          "max_participants",
          "id"
        ],
        "title": "EventRead",
        "description": "Schema for reading an event from the API."
      },
      "EventUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "duration_minutes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Minutes"
          },
          "max_participants": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Participants"
          },
          "is_paid": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Paid"
          },
          "price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price"
          }
        },
        "type": "object",
        "title": "EventUpdate",
        "description": "Schema for updating an event.\n\nAll fields are optional; only provided fields will be updated."
      },
      "FAQCreate": {
        "properties": {
          "question_short": {
            "type": "string",
            "title": "Question Short",
            "description": "Short question text displayed on the FAQ button"
          },
          "question_full": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Question Full",
            "description": "Full question text"
          },
          "answer": {
            "type": "string",
            "title": "Answer",
            "description": "Answer text for the FAQ"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments",
            "description": "List of attachment URLs or identifiers"
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position",
            "description": "Ordering position for display; lower numbers appear first",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "question_short",
          "answer"
        ],
        "title": "FAQCreate",
        "description": "Schema for creating a new FAQ entry."
      },
      "FAQRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "question_short": {
            "type": "string",
            "title": "Question Short"
          },
          "question_full": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Question Full"
          },
          "answer": {
            "type": "string",
            "title": "Answer"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "question_short",
          "question_full",
          "answer",
          "attachments",
          "position",
          "created_at",
          "updated_at"
        ],
        "title": "FAQRead",
        "description": "Schema for reading an FAQ entry."
      },
      "FAQUpdate": {
        "properties": {
          "question_short": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Question Short"
          },
          "question_full": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Question Full"
          },
          "answer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Answer"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          },
          "position": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Position"
          }
        },
        "type": "object",
        "title": "FAQUpdate",
        "description": "Schema for updating an existing FAQ entry.\n\nAll fields are optional; only provided values will be updated."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MailingCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the mailing for internal reference"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Message content to send to users"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "description": "Criteria to select recipients, e.g. {\"event_id\": 1, \"is_paid\": true, \"is_attended\": true}"
          },
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At",
            "description": "When to schedule the mailing; if null, send immediately"
          },
          "messengers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Messengers",
            "description": "List of messenger channels to send this mailing to (e.g. ['telegram','vk','max']). If omitted, no tasks will be generated for bots and the mailing will only be stored for record keeping. Supported channels correspond to available bot integrations."
          }
        },
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "title": "MailingCreate",
        "description": "Schema for creating a new mailing."
      },
      "MailingLogRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "mailing_id": {
            "type": "integer",
            "title": "Mailing Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "sent_at": {
            "type": "string",
            "title": "Sent At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "mailing_id",
          "user_id",
          "status",
          "error_message",
          "sent_at"
        ],
        "title": "MailingLogRead",
        "description": "Schema for reading a single mailing log entry."
      },
      "MailingRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_by": {
            "type": "integer",
            "title": "Created By"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "messengers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Messengers"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_by",
          "title",
          "content",
          "filters",
          "scheduled_at",
          "created_at",
          "messengers"
        ],
        "title": "MailingRead",
        "description": "Schema for reading a mailing."
      },
      "MailingUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At"
          },
          "messengers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Messengers"
          }
        },
        "type": "object",
        "title": "MailingUpdate"
      },
      "PaymentCreate": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "example": 1000.0
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "default": "RUB",
            "example": "RUB"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "example": "\u041e\u043f\u043b\u0430\u0442\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438"
          },
          "event_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Id",
            "description": "ID \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436 \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\u043c",
            "example": 1
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430: yookassa, support \u0438\u043b\u0438 cash",
            "example": "yookassa"
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "PaymentCreate",
        "description": "Schema for creating a payment."
      },
      "PaymentRead": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "example": 1000.0
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "default": "RUB",
            "example": "RUB"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "example": "\u041e\u043f\u043b\u0430\u0442\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438"
          },
          "event_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Id",
            "description": "ID \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436 \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u0435\u043c",
            "example": 1
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430: yookassa, support \u0438\u043b\u0438 cash",
            "example": "yookassa"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "example": "pending"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id",
            "example": "2bcd42fa"
          },
          "confirmed_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed By"
          },
          "confirmed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confirmed At"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "id",
          "created_at"
        ],
        "title": "PaymentRead",
        "description": "Schema for reading a payment."
      },
      "ReviewCreate": {
        "properties": {
          "event_id": {
            "type": "integer",
            "title": "Event Id",
            "description": "Identifier of the event being reviewed"
          },
          "rating": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Rating",
            "description": "Rating from 1 to 5"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Optional textual comment"
          }
        },
        "type": "object",
        "required": [
          "event_id",
          "rating"
        ],
        "title": "ReviewCreate",
        "description": "Schema for creating a new review."
      },
      "ReviewModerate": {
        "properties": {
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Whether to approve the review"
          }
        },
        "type": "object",
        "required": [
          "approved"
        ],
        "title": "ReviewModerate",
        "description": "Schema for moderating a review."
      },
      "ReviewRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "event_id": {
            "type": "integer",
            "title": "Event Id"
          },
          "rating": {
            "type": "integer",
            "title": "Rating"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved"
          },
          "moderated_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Moderated By"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "event_id",
          "rating",
          "comment",
          "approved",
          "moderated_by",
          "created_at"
        ],
        "title": "ReviewRead",
        "description": "Schema for reading a review from the API."
      },
      "SocialLogin": {
        "properties": {
          "social_provider": {
            "type": "string",
            "title": "Social Provider"
          },
          "social_id": {
            "type": "string",
            "title": "Social Id"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          }
        },
        "type": "object",
        "required": [
          "social_provider",
          "social_id"
        ],
        "title": "SocialLogin",
        "description": "Payload for social login.\n\nClients should provide the external service identifier (e.g. 'telegram',\n'vk') and the unique user identifier within that service.  Optionally\na full name may be supplied to populate the user record on first login."
      },
      "SupportMessageCreate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Text content of the message"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments",
            "description": "Optional list of attachment identifiers"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "SupportMessageCreate",
        "description": "Schema for creating or replying to a support message.\n\nMessages may include text and optional attachments.  Attachments\nshould be provided as a list of strings (e.g. file URLs or IDs);\nthey are stored as JSON in the database."
      },
      "SupportMessageRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "ticket_id": {
            "type": "integer",
            "title": "Ticket Id"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "sender_role": {
            "type": "string",
            "title": "Sender Role"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "admin_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Admin Id"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          }
        },
        "type": "object",
        "required": [
          "id",
          "ticket_id",
          "content",
          "created_at",
          "sender_role"
        ],
        "title": "SupportMessageRead",
        "description": "Schema for reading a support message from the API.\n\nIncludes the ID, associated ticket, sender role and creation\ntimestamp.  Optionally includes the IDs of the user and admin\nwho sent the message.  The ``content`` field contains the\nmessage text with HTML characters escaped to prevent\ncross\u2011site scripting."
      },
      "SupportTicketCreate": {
        "properties": {
          "subject": {
            "type": "string",
            "title": "Subject",
            "description": "Subject or title of the support request"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Initial message content"
          }
        },
        "type": "object",
        "required": [
          "subject",
          "content"
        ],
        "title": "SupportTicketCreate",
        "description": "Schema for creating a new support ticket.\n\nThe client provides a subject and the initial message content.\nAdditional metadata can be added later (e.g. attachments)."
      },
      "SupportTicketRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "subject": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subject"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "subject",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "SupportTicketRead",
        "description": "Schema for reading a support ticket.\n\nThis schema represents a ticket without its messages.  When\nretrieving a ticket with messages, the API may return a separate\nstructure containing ``ticket`` and ``messages`` lists."
      },
      "SupportTicketUpdate": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "New status for the ticket"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "SupportTicketUpdate",
        "description": "Schema for updating the status of an existing support ticket.\n\nOnly the ``status`` field may be updated.  Valid statuses include\n``open``, ``in_progress``, ``resolved`` and ``closed``.  Validation\nof allowed values should be performed at the service or endpoint\nlevel."
      },
      "TaskRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "title": "TaskRead",
        "description": "Schema for reading a scheduled task.\n\nAttributes\n----------\nid : int\n    Unique identifier of the task in the corresponding table (e.g.,\n    ``mailings.id`` or ``support_tickets.id``).\ntype : str\n    A short code describing the type of task.  Current values are\n    ``\"mailing\"`` for scheduled mass messages and ``\"support_ticket\"``\n    for open support requests.  Clients should ignore types they\n    do not recognize.\ntitle : Optional[str]\n    A short human\u2011readable name for the task.  For mailings this\n    corresponds to the mailing title; for support tickets the\n    subject.\ndescription : Optional[str]\n    An optional longer description or content, e.g. the body of a\n    mailing.  Bots may choose to display this to operators or use\n    it as the basis of a message to users.\nscheduled_at : Optional[datetime]\n    For tasks that have a specific time when they should be\n    executed (e.g., mailings), this field contains the scheduled\n    date/time.  It may be ``None`` for tasks like open support\n    tickets."
      },
      "TicketWithMessages": {
        "properties": {
          "ticket": {
            "$ref": "#/components/schemas/SupportTicketRead"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/SupportMessageRead"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "required": [
          "ticket",
          "messages"
        ],
        "title": "TicketWithMessages",
        "description": "Composite schema for returning a ticket along with its messages."
      },
      "UserCreate": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "example": "user@example.com"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name",
            "example": "\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "default": false,
            "example": false
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password",
            "example": "strongpassword"
          },
          "social_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Social Provider",
            "description": "\u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u043a\u043e\u0434 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (telegram, vk, etc.)",
            "example": "telegram"
          },
          "social_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Social Id",
            "description": "\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438",
            "example": "123456789"
          }
        },
        "type": "object",
        "title": "UserCreate",
        "description": "Schema for registering a user.\n\nThere are two ways to create a user:\n\n* \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440: \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f ``email`` \u0438 ``password``.  ``social_provider`` \u0438\n  ``social_id`` \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n* \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u0437 \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440\u0430: \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f ``social_provider`` \u0438 ``social_id``.\n  ``password`` \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0443\u0449\u0435\u043d.\n\n\u0425\u043e\u0442\u044f \u043f\u043e\u043b\u0435 ``password`` \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\n\u0435\u0433\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 Telegram/\u0441\u043e\u0446\u0441\u0435\u0442\u0435\u0439.  \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\n\u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432."
      },
      "UserRead": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email",
            "example": "user@example.com"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name",
            "example": "\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "default": false,
            "example": false
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "UserRead",
        "description": "Schema for reading a user from the API."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}